toFixed(n) ===> method to convert number to string 
          n--> how many number of fraction.
         "
         but have a small issue in round 
          ex. x=2.005
              x.toFixed(2) = 2.00 but the correct answer 2.01
              so we round number before use it 
              Math.round(x).toFixed(2).
          "
------------------------------------------------------------------------
in timeLine in vs code we can see all changes step by step this called version history .
------------------------------------------------------------------------
dataset to get Attribute in your nootbook ; 
------------------------------------------------------------------------
Module 
الفكره ان في الاخر كل ملفات الجافا اسكريبت بتتجمع مع بعضها 


when we have file contain var ex. cart.js and we want use the same name in other file 
conflict happen because we use the same name, so we use Module
1 - delete <script src="cart.js"></script> from html file
and because we want to use this file in amazon.js put type="module" in script tag to amazon file 
2- export cart from "./data/cart.js" to access it outside this file .
2 - import cart from "./data/cart.js" in amazon.js ex -> import {cart} from "./data/cart.js"
  import + name of var that we want to import + from + path of file

  "must open amazon html in live server to see the changes, not open file directly in browser from folders"


  benefits of module 
    - help us avoid naming conflict by using as + new name in import  ex. ->
    import {cart as myCart} from "./data/cart.js";
    - we don not have to worry about order of files in html because we import it in js .
    يعني مش هبقا محتاج اني استدعي الفيل بتاع الكارت قبل الفايل اللي هستخدمه فيه
    - module can use to organize your code .

    we can import multiple things from file ex
    import {cart, addToCart} from "./data/cart.js"


    'so module help us to reuse a lot of code and reduce repetition'
------------------------------------------------------------------------

h1.remove(); -- > to remove element from dom.
------------------------------------------------------------------------
  "External Libraries"
  - dayjs  : used to get date and time and add  for example number of days  (helps work with date and time)
  ex.
     const today=dayjs();  // to get date of today
     today.add(7,"days")  // number of days and what is this number days ex. "days" , "months" , "years" ...
      today.formate('dddd,MMMM D')  // saturday , june 10

      esm -> EcmaScript Modules 


"
    default export in module its another way to export one thing from file 
    each file have one default export

    export default function addToCart(ProductId){
      // code
    }

    وتروح في المكان اللي هتستخدمها فيه 
    import addToCart from "./data/cart.js"  // without {}
    each file have one default export
"

----------------------------------------------------------------------------

MVC -- > is a design pattern in software engineering that separates an application into three main components: model, view, and controller.
and used to organize and design our code .

-----------------------------------------------------------------------------
Automated Test :
     meaning is to make computer test your code instead of you.
     ex if have fun and want to test it call it and take parameters and check if it work or not from
     the result of computer .
-----------------------------------------------------------------------------

-- Testing Framework
    means use External Library to test our code
    ex. jasmine and mocha

    unit test --> called when test one function that have one work
    integration test --> called when test function that have more than one work 
    ex. renderOrderSummary function
------------------------------------------------------------------------------
OPP --> organize your code into obj.
procedure programming : Write a code step by step. = a function.
oop - > represent real world object in code.

-- Class: is specially designed for generating objects.
class is basically an object generator.

if we create obj 'cart' from class and want to check if this obj 
is instance of this class we use instanceof keyword.
 ex. console.log(cart instanceof Cart) // true if cart is instance of Cart class


 -- to create private property just add # before the name of property.
   ex.
   class Cart {
    #items = [] // private property
  }
  'private means this property can not access outside the class'
  cart.#items.push('item') ---> Error
   methods also to make it private just add # before the name of method.
   ex.
   -------------------------------------
   class Cart {
    #items = [] // private property
   
    constructor(item){
      this.#items=item
    }
    #addItem(item){
      #items.push(item)
    }
   }
   -------------------------------------
   -- Inheritance >> means one class get all the properties of another class

   class child extends parent{
    //
   }

   if i have a class parent and have child inherit from parent and child class have a constructor 
   and want to assign properties that the child inherit it from parent we use super keyword.

   class parent{
    A;
    B;
    constructor(details){
       this.A=details.A;
       this.B=details.B;
    }
   }

   class child extends parent{
    c;
    constructor(details){
      super() // call parent constructor
      this.c=details.c;
    }
   }


   -- if i have method in parent class and i have method with the same name in 
   child class  and i want to use the parent method in child class we use super keyword.
-------------------------------------------
   class parent{
    A;
    B;
    constructor(details){
       this.A=details.A;
       this.B=details.B;  
    } 
    methodA(){
      // code
      return "";
    }
   }

   class child extends parent{
    c;
    constructor(details){
      super() // call parent constructor
      this.c=details.c;
    }
    methodA(){
      super.methodA(); // call parent method
      return "Hello";
    }

   }

   and this is called method overriding

   -- polymorphism means many forms 
   

-------------------------------------------------------

built in classes : class that already exist in js. provided by js.
ex.
  Date() --> this class generate obj that represent current date and time.

  const date = new Date();
  console.log(date); // Sun Jun 12 2022 12:27:49 GMT+0100 (West Africa Standard Time)
  console.log(date.toLocaleDateString()); // 6/12/2022


  -----------------------------------------
  function logThis(){
    console.log(this);
  }

  logThis(); // undefined
  logThis.call('hello'); // Hello 
  .call --> use to call a function but with assign this